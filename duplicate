"""
In this assignment you will implement and compare different search strategies
for solving the n-Puzzle, which is a generalization of the 8 and 15 puzzle to
squares of arbitrary size (we will only test it with 8-puzzles for now). 
"""

import time

def state_to_string(state):
    row_strings = [" ".join([str(cell) if cell>0 else " "for cell in row]) for row in state]
    return "\n".join(row_strings)


def swap_cells(state, i1, j1, i2, j2):
    """
    Returns a new state with the cells (i1,j1) and (i2,j2) swapped. 
    """
    value1 = state[i1][j1]
    value2 = state[i2][j2]
    
    new_state = []
    for row in range(len(state)): 
        new_row = []
        for column in range(len(state[row])): 
            if row == i1 and column == j1: 
                new_row.append(value2)
            elif row == i2 and column == j2:
                new_row.append(value1)
            else: 
                new_row.append(state[row][column])
        new_state.append(tuple(new_row))
    return tuple(new_state)
    

def get_successors(state):
    """
    This function returns a list of possible successor states resulting
    from applicable actions. 
    The result should be a list containing (Action, state) tuples. 
    For example [("Up", ((1, 4, 2),(0, 5, 8),(3, 6, 7))), 
                 ("Left",((4, 0, 2),(1, 5, 8),(3, 6, 7)))] 
    """ 
    child_states = []

    for row in range(len(state)):
        for column in range(len(state[row])):
            if state[row][column] == 0:
                if column < len(state)-1: # Left 
                    new_state = swap_cells(state, row,column, row, column+1)
                    child_states.append(("Left",new_state))
                if column > 0: # Right 
                    new_state = swap_cells(state, row,column, row, column-1)
                    child_states.append(("Right",new_state))
                if row < len(state)-1:   #Up 
                    new_state = swap_cells(state, row,column, row+1, column)
                    child_states.append(("Up",new_state))
                if row > 0: # Down
                    new_state = swap_cells(state, row,column, row-1, column)
                    child_states.append(("Down", new_state))
                break
    return child_states

            
def goal_test(state):
    """
    Returns True if the state is a goal state, False otherwise. 
    """    
    counter = 0
    for row in state:
        for cell in row: 
            if counter != cell: 
                return False 
            counter += 1
    return True
   
def bfs(state): 
  parents = {} #Key = New orientation value = previous orientation
  actions = {} #Key = New Orientation value = direction   
  tabu = []
  tabu.append(state)
  actions["start"] = state
  queue = []

  print(actions)
  p = "start"
  while len(queue) > 0:
    p = queue.pop(p) 
    queue.append(state)
    print(queue)
    p = state
  while len(queue) > 0: 
   #for i in range(0,3):
    p = queue.pop() 
    options  = get_successors(p)
    for i in options:
       print(i, p)
       if i[1] not in tabu:
	          if(goal_test(i[1])):
	            return True
	          else:
	            tabu.append(i[1])
	            queue.append(i[1])
              actions[i[1]] = i[0] #print("index 1 in action: ", i[0])
              parents[i[1]] = p #print("index 0 in action: AND index 0 in parents:", i[1])
     
     return get_solution(i[1], parents, actions) 
  """    
  Breadth first search.    
  Returns three values: A list of actions, the number of states expanded, and    
  the maximum size of the frontier.      
     
  parents = {} #Key = New orientation value = previous orientation
  actions = {} #Key = New Orientation value = direction   
  tabu = []
  tabu.append(state)
  queue = []
  queue.append(state)
  print(queue)
  p = state
  #while len(queue) > 0: 
  for i in range(0,3):
    p = queue.pop() 
    options = get_successors(p)
    for i in options:
      print(i, p)
      if i[1] not in tabu:
        if(goal_test(i[1])):
          return True
        else:
          tabu.append(i[1])
          queue.append(i[1])
          actions[i[1]] = i[0]
          parents[i[1]] = p
          print("ACTIONS ", actions) 
          print("PARENTS ", parents) 
          print("TABU ", tabu) 
          print("QUEUE ", queue) 
      print()
     # print(queue)
    #get_solution(i[1], parents, actions)
  return get_solution(p, parents, actions)
  return None # No solution found
  """                             
def dfs(state):
    """
    Breadth first search.
    Returns three values: A list of actions.  
    """
    parents = {}
    actions = {}
    costs = {}

    costs[state] = 0

    #Write code here for dfs  
                
    return None # No solution found


def misplaced_heuristic(state):
    """
    Returns the number of misplaced tiles.
    """
    return 0 # replace this


def manhattan_heuristic(state):
    """
    For each misplaced tile, compute the manhattan distance between the current
    position and the goal position. THen sum all distances. 
    """

    return 0 # replace this


def get_solution(state, parents, actions):
    """
    Helper function to retrieve the solution. 
    """
    # parents: {((3, 0, 1), (2, 6, 8), (7, 4, 9))): ((0, 3, 1), (2, 6, 8), (7, 4, 9))}
    # actions: {((((3, 0, 1), (2, 6, 8), (7, 4, 9)): 'Left'))}
    # Write solution traversal here 
    solution = []
    print("STATE ", state)
    action = actions[state]
    print("ACTION ", action)
    solution.append(action)
    state = parents[state]
    print("STATE ", state)
    solution.append(state)

    return solution


def best_first(state, heuristic = misplaced_heuristic):
    """
    Breadth first search using the heuristic function passed as a parameter.
    Returns three values: A list of actions, the number of states expanded, and
    the maximum size of the frontier.  
    """

    # You might want to use these functions to maintain a priority queue
    # You may also use your own heap class here
    from heapq import heappush
    from heapq import heappop

    parents = {}
    actions = {}
    costs = {}

    costs[state] = 0

    # Write best first search here.

    return None # No solution found


def astar(state, heuristic = misplaced_heuristic):
    """
    A-star search using the heuristic function passed as a parameter. 
    Returns three values: A list of actions, the number of states expanded, and
    the maximum size of the frontier.  
    """
    # You might want to use these functions to maintain a priority queue
    # You may also use your own heap class here

    from heapq import heappush
    from heapq import heappop

    parents = {}
    actions = {}
    costs = {}

    costs[state] = 0
    
    # Write A* search here

    return None # No solution found


def print_result(solution):
    """
    Helper function to format test output. 
    """
    if solution is None: 
        print("No solution found.")
    else: 
        print("Solution has {} actions.".format(len(solution)))



if __name__ == "__main__":

    #Easy test case
    test_state = ((0, 3, 1),
                  (2, 6, 8), 
                  (7, 4, 9))  
    """
    test_state = ((1, 4, 2),
                  (0, 5, 8), 
                  (3, 6, 7)) 
    """
    #More difficult test case
    #test_state = ((7, 2, 4),
    #              (5, 0, 6), 
    #              (8, 3, 1))  

    print(state_to_string(test_state))
    print()

    print("====BFS====")
    solution = bfs(test_state) 
    print(solution) # not in class
    print() # not in class
    #start = time.time()
    print_result(solution)
    print() # not in class
    #end = time.time()
    if solution is not None:
        print(solution)
    #print("Total time: {0:.3f}s".format(end-start))
"""
    print() 
    print("====DFS====") 
    start = time.time()
    solution = dfs(test_state)
    end = time.time()
    print_result(solution)
    print("Total time: {0:.3f}s".format(end-start))

    print() 
    print("====Greedy Best-First (Misplaced Tiles Heuristic)====") 
    start = time.time()
    solution = best_first(test_state, misplaced_heuristic)
    end = time.time()
    print_result(solution)
    print("Total time: {0:.3f}s".format(end-start))
    
    print() 
    print("====A* (Misplaced Tiles Heuristic)====") 
    start = time.time()
    solution = astar(test_state, misplaced_heuristic)
    end = time.time()
    print_result(solution)
    print("Total time: {0:.3f}s".format(end-start))

    #print() 
    #print("====A* (Total Manhattan Distance Heuristic)====") 
    #start = time.time()
    #solution, states_expanded, max_frontier = astar(test_state, manhattan_heuristic)
    #end = time.time()
    #print_result(solution, states_expanded, max_frontier)
    #print("Total time: {0:.3f}s".format(end-start))

"""